{"version":3,"sources":["components/navbar.jsx","components/Home.js","utils/httpService.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","className","to","activeClassName","Component","Home","axios","interceptors","response","use","error","status","toast","Promise","reject","get","put","delete","post","Profile","posts","handleFetch","a","console","clear","http","config","urlEndpoint","data","setState","handleAdd","obj","title","body","log","handleUpdate","id","index","indexOf","handleDelete","filter","p","style","textAlign","src","alt","fontWeight","onClick","this","length","map","key","App","Fragment","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.37f54479.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nclass Navbar extends Component {\n  state = {};\n  render() {\n    return (\n      <nav className=\"navbar navbar-inverse\">\n        <div className=\"container-fluid\">\n          <div className=\"navbar-header\">\n            <NavLink className=\"navbar-brand\" to=\"/\">\n              CipherSchool\n            </NavLink>\n          </div>\n          <ul className=\"nav navbar-nav\">\n            <li >\n              <NavLink to=\"/\" activeClassName=\"nav1\">Home</NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/profile\" activeClassName=\"nav1\">Profile</NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/\">Contact us</NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/\">Page 3</NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from 'react'\r\n\r\nexport default function Home(){\r\n\r\n        return(\r\n            <div className=\"container\">\r\n                    <h1>Home Page</h1>\r\n            </div>\r\n\r\n        )\r\n    \r\n\r\n}","import axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\n// Types of requests\r\n// CRUD application -> Create,Read, Update and Delete\r\n// POST Request -> Create resource\r\n// GET Request -> Fetching/Reading the resource\r\n// PUT([\r\n//   {'a' :'a'},\r\n//   {'b':'b'}\r\n// ]) / PATCH([{'a':'A'}]) -> Updating the resource\r\n// DELETE Request -> Deleteing a resource\r\n\r\n//AJAX Example\r\n// function loadDoc() {\r\n//   var xhttp = new XMLHttpRequest();\r\n//   xhttp.onreadystatechange = function() {\r\n//     if (this.readyState == 4 && this.status == 200) {\r\n//       console.log(this.responseText);\r\n//     }\r\n//   };\r\n//   xhttp.open(\"GET\", \"https://jsonplaceholder.typicode.com/posts\", true);\r\n//   xhttp.send();\r\n// }\r\n\r\naxios.interceptors.response.use(null, error => {\r\n    // console.log(\"Error log\",err);\r\n    // console.log(error);\r\n    \r\n    const expectedError = error.response && error.response.status >= 400 && error.response.status<500;\r\n    if(expectedError){\r\n      toast.error('Expected error occured');\r\n    }else{\r\n        toast(\"Unexpected Error\");\r\n    }\r\n    return  Promise.reject(error);\r\n});\r\n\r\n\r\nexport default {\r\n    get: axios.get,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n    post: axios.post\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport config from \"../config/config.json\";\r\nimport http from \"../utils/httpService\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nclass Profile extends Component {\r\n  state = {\r\n    posts: [],\r\n  };\r\n\r\n   handleFetch=async()=> {\r\n    console.clear();\r\n    const { data: posts } = await http.get(config.urlEndpoint);\r\n    this.setState({ posts });\r\n  }\r\n\r\n  handleAdd = async () => {\r\n    const obj = {\r\n      title: \"learning react\",\r\n      body: \"React is easy to understand\",\r\n    };\r\n    const { data: post } = await http.post(config.urlEndpoint, obj);\r\n    console.log(post);\r\n    const posts = [post, ...this.state.posts];\r\n    this.setState({ posts });\r\n  };\r\n\r\n  handleUpdate = async (post) => {\r\n    post.title = \"Updated title\";\r\n    const { data } = await http.put(config.urlEndpoint + \"/\" + post.id, post);\r\n\r\n    const posts = [...this.state.posts];\r\n    const index = posts.indexOf(post);\r\n    console.log(posts[0]);\r\n    posts[index] = { ...post };\r\n    this.setState({ posts });\r\n  };\r\n\r\n  handleDelete = async (post) => {\r\n    try {\r\n      const temp = await http.delete(\r\n        \"https://jsonplaceholder.typicode.com/pos\" + \"/\" + post.id\r\n      );\r\n    } catch (err) {\r\n    }\r\n\r\n    const posts = this.state.posts.filter((p) => p.id !== post.id);\r\n    this.setState({ posts });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <ToastContainer />\r\n\r\n        <div className=\"row\" style={{ textAlign: \"center\" }}>\r\n          <div className=\"col-xs-5 col-xs-offset-3\">\r\n            <img src=\"logo192.png\" alt=\"logo\" />\r\n            <h1 style={{ fontWeight: \"bold\" }}>Cipher School</h1>\r\n            <h2>Learning React from 8 - 10 AM</h2>\r\n            <button className=\"btn btn-success\" onClick={this.handleFetch}>\r\n              Fetch Table\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {(()=>{\r\n            if(this.state.posts.length!==0){\r\n                return(\r\n            <>\r\n        <button className=\"btn btn-primary\" onClick={this.handleAdd}>\r\n        {\" \"}\r\n        Add\r\n      </button>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Title</th>\r\n            <th>Update</th>\r\n            <th>Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.state.posts.map((post) => (\r\n            <tr key={post.id}>\r\n              <td>{post.title}</td>\r\n              <td>\r\n                <button\r\n                  className=\"btn btn-info btn-sm\"\r\n                  onClick={() => this.handleUpdate(post)}\r\n                >\r\n                  Update\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  className=\"btn btn-danger btn-sm\"\r\n                  onClick={() => this.handleDelete(post)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table> \r\n      </>       \r\n                )\r\n        }})()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/navbar\";\nimport Home from './components/Home';\nimport Profile from './components/Profile';\nimport {Switch,Route,Redirect} from 'react-router-dom'\nexport default class App extends Component {\n  \n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <Switch>\n          <Route exact path='/profile' component={Profile}/>\n          <Route path='/' component={Home}/>\n          <Redirect path=\"/\"/>\n        </Switch>\n\n      </React.Fragment> \n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\n\n\n/********************************* */\n//    User Imported Objects/Classes\n/********************************* */\n\n\nReactDOM.render(\n  <BrowserRouter><App /></BrowserRouter>\n    \n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}